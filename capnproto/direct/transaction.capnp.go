// Code generated by capnpc-go. DO NOT EDIT.

package direct

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Transaction struct{ capnp.Struct }

// Transaction_TypeID is the unique identifier for the type Transaction.
const Transaction_TypeID = 0xa2f36c7591336d2e

func NewTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Transaction{st}, err
}

func NewRootTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Transaction{st}, err
}

func ReadRootTransaction(msg *capnp.Message) (Transaction, error) {
	root, err := msg.RootPtr()
	return Transaction{root.Struct()}, err
}

func (s Transaction) String() string {
	str, _ := text.Marshal(0xa2f36c7591336d2e, s.Struct)
	return str
}

func (s Transaction) Data() (TransactionData, error) {
	p, err := s.Struct.Ptr(0)
	return TransactionData{Struct: p.Struct()}, err
}

func (s Transaction) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Transaction) SetData(v TransactionData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewData sets the data field to a newly
// allocated TransactionData struct, preferring placement in s's segment.
func (s Transaction) NewData() (TransactionData, error) {
	ss, err := NewTransactionData(s.Struct.Segment())
	if err != nil {
		return TransactionData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Transaction) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Transaction) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Transaction) SetSignature(v []byte) error {
	return s.Struct.SetData(1, v)
}

// Transaction_List is a list of Transaction.
type Transaction_List struct{ capnp.List }

// NewTransaction creates a new list of Transaction.
func NewTransaction_List(s *capnp.Segment, sz int32) (Transaction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Transaction_List{l}, err
}

func (s Transaction_List) At(i int) Transaction { return Transaction{s.List.Struct(i)} }

func (s Transaction_List) Set(i int, v Transaction) error { return s.List.SetStruct(i, v.Struct) }

func (s Transaction_List) String() string {
	str, _ := text.MarshalList(0xa2f36c7591336d2e, s.List)
	return str
}

// Transaction_Promise is a wrapper for a Transaction promised by a client call.
type Transaction_Promise struct{ *capnp.Pipeline }

func (p Transaction_Promise) Struct() (Transaction, error) {
	s, err := p.Pipeline.Struct()
	return Transaction{s}, err
}

func (p Transaction_Promise) Data() TransactionData_Promise {
	return TransactionData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type TransactionData struct{ capnp.Struct }

// TransactionData_TypeID is the unique identifier for the type TransactionData.
const TransactionData_TypeID = 0xd673e44389face8e

func NewTransactionData(s *capnp.Segment) (TransactionData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TransactionData{st}, err
}

func NewRootTransactionData(s *capnp.Segment) (TransactionData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TransactionData{st}, err
}

func ReadRootTransactionData(msg *capnp.Message) (TransactionData, error) {
	root, err := msg.RootPtr()
	return TransactionData{root.Struct()}, err
}

func (s TransactionData) String() string {
	str, _ := text.Marshal(0xd673e44389face8e, s.Struct)
	return str
}

func (s TransactionData) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TransactionData) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TransactionData) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TransactionData) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// TransactionData_List is a list of TransactionData.
type TransactionData_List struct{ capnp.List }

// NewTransactionData creates a new list of TransactionData.
func NewTransactionData_List(s *capnp.Segment, sz int32) (TransactionData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TransactionData_List{l}, err
}

func (s TransactionData_List) At(i int) TransactionData { return TransactionData{s.List.Struct(i)} }

func (s TransactionData_List) Set(i int, v TransactionData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TransactionData_List) String() string {
	str, _ := text.MarshalList(0xd673e44389face8e, s.List)
	return str
}

// TransactionData_Promise is a wrapper for a TransactionData promised by a client call.
type TransactionData_Promise struct{ *capnp.Pipeline }

func (p TransactionData_Promise) Struct() (TransactionData, error) {
	s, err := p.Pipeline.Struct()
	return TransactionData{s}, err
}

const schema_d8ebca068ad880fd = "x\xdat\xce1K\xc3@\x00\xc5\xf1\xf7\xee\x92\xb6C" +
	"C\x12RPw\x17\x8b\xad\x96.\xe2\xa2\xa0\x93\x93'" +
	"\xae\x0eG\x1a$`\xce\x9a\\q\x15\x9ct\x10\xfc\x0a" +
	"~\x1c\x07G\xe9\x07ps\x127\xa1\x9c\x1cB\x05\xc1" +
	"\xed\xf1\xe7\x0d\xbf\xe4v_\x8c\xc2\x15\x01\xa8\xd5\xb0\xe5" +
	"\x86\xd5\xf8qv\xf1\xf9\x84t\x8dnq3\xbfo=" +
	"\xbf\xcf\x11\x8a60\xfa\xe83#\xdb@\xba\xb8\x06\xdd" +
	"\xc3\xcb\xd7\xdd\xc1[\xf3\xfa\xe7\xea\x0f\xe33\x1e1\xbb" +
	"\xf23\xab\xb8\x87\x81\x9b\x94u\x91\xdb-+km\x1a" +
	"\x9d\xdb\xf2\xd2\x0cs=5\xd3\xdd\xd3\x9f\x12\xfbtL" +
	"\xaa\x8e\x0c\x80\x80@\xba\xd1\x07\xd4\xba\xa4\xda\x16L\xc9" +
	"\x1e}\x1c\x9c\x00jSR\xed\x08\xc6\x13m5\x93_" +
	"\x09\xc8\x04tMyn\xb4\x9d\xd5`\xc1\x08\x82\x11\xb8" +
	"\x04\x04\xff\x01|9\xd4V\x03^\x11,\x15\x91Wt" +
	"$UO06\xba*\xd8\x85`\x17\xfc\x0e\x00\x00\xff" +
	"\xffR\xa2S\xf7"

func init() {
	schemas.Register(schema_d8ebca068ad880fd,
		0xa2f36c7591336d2e,
		0xd673e44389face8e)
}
